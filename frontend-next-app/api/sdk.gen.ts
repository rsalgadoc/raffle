// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { AddRaffleData, AddRaffleResponses, AddRaffleErrors, UpdateRaffleData, UpdateRaffleResponses, UpdateRaffleErrors, FindRafflesByStatusData, FindRafflesByStatusResponses, FindRafflesByStatusErrors, DeleteRaffleData, DeleteRaffleResponses, DeleteRaffleErrors, GetRaffleByIdData, GetRaffleByIdResponses, GetRaffleByIdErrors, UpdateRaffleWithFormData, UpdateRaffleWithFormResponses, UpdateRaffleWithFormErrors, CreateUserData, CreateUserResponses, CreateUserErrors, CreateUsersWithListInputData, CreateUsersWithListInputResponses, CreateUsersWithListInputErrors, LoginUserData, LoginUserResponses, LoginUserErrors, LogoutUserData, LogoutUserResponses, LogoutUserErrors, DeleteUserData, DeleteUserResponses, DeleteUserErrors, GetUserByNameData, GetUserByNameResponses, GetUserByNameErrors, UpdateUserData, UpdateUserResponses, UpdateUserErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Add a new raffle to the store.
 * Add a new raffle to the store.
 */
export const addRaffle = <ThrowOnError extends boolean = false>(options: Options<AddRaffleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddRaffleResponses, AddRaffleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/raffle',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update an existing raffle.
 * Update an existing raffle by Id.
 */
export const updateRaffle = <ThrowOnError extends boolean = false>(options: Options<UpdateRaffleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateRaffleResponses, UpdateRaffleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/raffle',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Finds Raffles by status.
 * Multiple status values can be provided with comma separated strings.
 */
export const findRafflesByStatus = <ThrowOnError extends boolean = false>(options?: Options<FindRafflesByStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FindRafflesByStatusResponses, FindRafflesByStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/raffle/findByStatus',
        ...options
    });
};

/**
 * Deletes a raffle.
 * Delete a raffle.
 */
export const deleteRaffle = <ThrowOnError extends boolean = false>(options: Options<DeleteRaffleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRaffleResponses, DeleteRaffleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/raffle/{raffleId}',
        ...options
    });
};

/**
 * Find raffle by ID.
 * Returns a single raffle.
 */
export const getRaffleById = <ThrowOnError extends boolean = false>(options: Options<GetRaffleByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRaffleByIdResponses, GetRaffleByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'api_key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/raffle/{raffleId}',
        ...options,
        headers: {
            'Accept': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Updates a raffle in the store with form data.
 * Updates a raffle resource based on the form data.
 */
export const updateRaffleWithForm = <ThrowOnError extends boolean = false>(options: Options<UpdateRaffleWithFormData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateRaffleWithFormResponses, UpdateRaffleWithFormErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/raffle/{raffleId}',
        ...options
    });
};

/**
 * Create user.
 * This can only be done by the logged in user.
 */
export const createUser = <ThrowOnError extends boolean = false>(options?: Options<CreateUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateUserResponses, CreateUserErrors, ThrowOnError>({
        url: '/v1/user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Creates list of users with given input array.
 * Creates list of users with given input array.
 */
export const createUsersWithListInput = <ThrowOnError extends boolean = false>(options?: Options<CreateUsersWithListInputData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateUsersWithListInputResponses, CreateUsersWithListInputErrors, ThrowOnError>({
        url: '/v1/user/createWithList',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Logs user into the system.
 * Log into the system.
 */
export const loginUser = <ThrowOnError extends boolean = false>(options?: Options<LoginUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LoginUserResponses, LoginUserErrors, ThrowOnError>({
        url: '/v1/user/login',
        ...options
    });
};

/**
 * Logs out current logged in user session.
 * Log user out of the system.
 */
export const logoutUser = <ThrowOnError extends boolean = false>(options?: Options<LogoutUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LogoutUserResponses, LogoutUserErrors, ThrowOnError>({
        url: '/v1/user/logout',
        ...options
    });
};

/**
 * Delete user resource.
 * This can only be done by the logged in user.
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponses, DeleteUserErrors, ThrowOnError>({
        url: '/v1/user/{username}',
        ...options
    });
};

/**
 * Get user by user name.
 * Get user detail based on username.
 */
export const getUserByName = <ThrowOnError extends boolean = false>(options: Options<GetUserByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByNameResponses, GetUserByNameErrors, ThrowOnError>({
        url: '/v1/user/{username}',
        ...options
    });
};

/**
 * Update user resource.
 * This can only be done by the logged in user.
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserResponses, UpdateUserErrors, ThrowOnError>({
        url: '/v1/user/{username}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};