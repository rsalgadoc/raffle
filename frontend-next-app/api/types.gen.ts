// This file is auto-generated by @hey-api/openapi-ts

export type User = {
    id?: number;
    username?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    password?: string;
    phone?: string;
    /**
     * User Status
     */
    userStatus?: number;
};

export type Raffle = {
    readonly id?: number;
    name: string;
    description?: string;
    prize?: string;
    drawDate?: string;
    country?: Country;
    /**
     * raffle status
     */
    status?: 'active' | 'upcoming' | 'past';
    imageUrl?: string;
    participationPeriod?: string;
    rulesUrl?: string;
};

export type Country = {
    name?: string;
    'alpha-2'?: string;
    'alpha-3'?: string;
    numeric?: string;
};

export type _Error = {
    code: string;
    message: string;
};

/**
 * Raffle object that needs to be added to the store
 */
export type Raffle2 = Raffle;

/**
 * List of user object
 */
export type UserArray = Array<User>;

export type AddRaffleData = {
    /**
     * Create a new raffle in the store
     */
    body: Raffle;
    path?: never;
    query?: never;
    url: '/v1/raffle';
};

export type AddRaffleErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Validation exception
     */
    422: unknown;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type AddRaffleError = AddRaffleErrors[keyof AddRaffleErrors];

export type AddRaffleResponses = {
    /**
     * Successful operation
     */
    200: Raffle;
};

export type AddRaffleResponse = AddRaffleResponses[keyof AddRaffleResponses];

export type UpdateRaffleData = {
    /**
     * Update an existent raffle in the store
     */
    body: Raffle;
    path?: never;
    query?: never;
    url: '/v1/raffle';
};

export type UpdateRaffleErrors = {
    /**
     * Invalid ID supplied
     */
    400: unknown;
    /**
     * Raffle not found
     */
    404: unknown;
    /**
     * Validation exception
     */
    422: unknown;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type UpdateRaffleError = UpdateRaffleErrors[keyof UpdateRaffleErrors];

export type UpdateRaffleResponses = {
    /**
     * Successful operation
     */
    200: Raffle;
};

export type UpdateRaffleResponse = UpdateRaffleResponses[keyof UpdateRaffleResponses];

export type FindRafflesByStatusData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Status values that need to be considered for filter
         */
        status?: 'available' | 'pending' | 'sold';
    };
    url: '/v1/raffle/findByStatus';
};

export type FindRafflesByStatusErrors = {
    /**
     * Invalid status value
     */
    400: unknown;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type FindRafflesByStatusError = FindRafflesByStatusErrors[keyof FindRafflesByStatusErrors];

export type FindRafflesByStatusResponses = {
    /**
     * successful operation
     */
    200: Array<Raffle>;
};

export type FindRafflesByStatusResponse = FindRafflesByStatusResponses[keyof FindRafflesByStatusResponses];

export type DeleteRaffleData = {
    body?: never;
    headers?: {
        api_key?: string;
    };
    path: {
        /**
         * Raffle id to delete
         */
        raffleId: number;
    };
    query?: never;
    url: '/v1/raffle/{raffleId}';
};

export type DeleteRaffleErrors = {
    /**
     * Invalid raffle value
     */
    400: unknown;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type DeleteRaffleError = DeleteRaffleErrors[keyof DeleteRaffleErrors];

export type DeleteRaffleResponses = {
    /**
     * Raffle deleted
     */
    200: unknown;
};

export type GetRaffleByIdData = {
    body?: never;
    path: {
        /**
         * ID of raffle to return
         */
        raffleId: number;
    };
    query?: never;
    url: '/v1/raffle/{raffleId}';
};

export type GetRaffleByIdErrors = {
    /**
     * Invalid ID supplied
     */
    400: unknown;
    /**
     * Raffle not found
     */
    404: unknown;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetRaffleByIdError = GetRaffleByIdErrors[keyof GetRaffleByIdErrors];

export type GetRaffleByIdResponses = {
    /**
     * successful operation
     */
    200: Raffle;
};

export type GetRaffleByIdResponse = GetRaffleByIdResponses[keyof GetRaffleByIdResponses];

export type UpdateRaffleWithFormData = {
    body?: never;
    path: {
        /**
         * ID of raffle that needs to be updated
         */
        raffleId: number;
    };
    query?: {
        /**
         * Name of raffle that needs to be updated
         */
        name?: string;
        /**
         * Status of raffle that needs to be updated
         */
        status?: string;
    };
    url: '/v1/raffle/{raffleId}';
};

export type UpdateRaffleWithFormErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type UpdateRaffleWithFormError = UpdateRaffleWithFormErrors[keyof UpdateRaffleWithFormErrors];

export type UpdateRaffleWithFormResponses = {
    /**
     * successful operation
     */
    200: Raffle;
};

export type UpdateRaffleWithFormResponse = UpdateRaffleWithFormResponses[keyof UpdateRaffleWithFormResponses];

export type CreateUserData = {
    /**
     * Created user object
     */
    body?: User;
    path?: never;
    query?: never;
    url: '/v1/user';
};

export type CreateUserErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    /**
     * successful operation
     */
    200: User;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type CreateUsersWithListInputData = {
    body?: Array<User>;
    path?: never;
    query?: never;
    url: '/v1/user/createWithList';
};

export type CreateUsersWithListInputErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type CreateUsersWithListInputError = CreateUsersWithListInputErrors[keyof CreateUsersWithListInputErrors];

export type CreateUsersWithListInputResponses = {
    /**
     * Successful operation
     */
    200: User;
};

export type CreateUsersWithListInputResponse = CreateUsersWithListInputResponses[keyof CreateUsersWithListInputResponses];

export type LoginUserData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The user name for login
         */
        username?: string;
        /**
         * The password for login in clear text
         */
        password?: string;
    };
    url: '/v1/user/login';
};

export type LoginUserErrors = {
    /**
     * Invalid username/password supplied
     */
    400: unknown;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type LoginUserError = LoginUserErrors[keyof LoginUserErrors];

export type LoginUserResponses = {
    /**
     * successful operation
     */
    200: string;
};

export type LoginUserResponse = LoginUserResponses[keyof LoginUserResponses];

export type LogoutUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/user/logout';
};

export type LogoutUserErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type LogoutUserError = LogoutUserErrors[keyof LogoutUserErrors];

export type LogoutUserResponses = {
    /**
     * successful operation
     */
    200: unknown;
};

export type DeleteUserData = {
    body?: never;
    path: {
        /**
         * The name that needs to be deleted
         */
        username: string;
    };
    query?: never;
    url: '/v1/user/{username}';
};

export type DeleteUserErrors = {
    /**
     * Invalid username supplied
     */
    400: unknown;
    /**
     * User not found
     */
    404: unknown;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
    /**
     * User deleted
     */
    200: unknown;
};

export type GetUserByNameData = {
    body?: never;
    path: {
        /**
         * The name that needs to be fetched. Use user1 for testing
         */
        username: string;
    };
    query?: never;
    url: '/v1/user/{username}';
};

export type GetUserByNameErrors = {
    /**
     * Invalid username supplied
     */
    400: unknown;
    /**
     * User not found
     */
    404: unknown;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetUserByNameError = GetUserByNameErrors[keyof GetUserByNameErrors];

export type GetUserByNameResponses = {
    /**
     * successful operation
     */
    200: User;
};

export type GetUserByNameResponse = GetUserByNameResponses[keyof GetUserByNameResponses];

export type UpdateUserData = {
    /**
     * Update an existent user in the store
     */
    body?: User;
    path: {
        /**
         * name that need to be deleted
         */
        username: string;
    };
    query?: never;
    url: '/v1/user/{username}';
};

export type UpdateUserErrors = {
    /**
     * bad request
     */
    400: unknown;
    /**
     * user not found
     */
    404: unknown;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors];

export type UpdateUserResponses = {
    /**
     * successful operation
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'https://dev.example.com' | 'https://qa.example.com' | 'https://prod.example.com' | (string & {});
};