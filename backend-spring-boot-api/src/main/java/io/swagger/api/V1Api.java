/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.71).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.Raffle;
import io.swagger.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-08-11T23:57:49.439903428Z[GMT]")
@Validated
public interface V1Api {

    @Operation(summary = "Add a new raffle to the store.", description = "Add a new raffle to the store.", security = {
        @SecurityRequirement(name = "rafflestore_auth", scopes = {
            "write:raffles",
"read:raffles"        })    }, tags={ "raffle" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Raffle.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "422", description = "Validation exception"),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/raffle",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Raffle> addRaffle(@Parameter(in = ParameterIn.DEFAULT, description = "Create a new raffle in the store", required=true, schema=@Schema()) @Valid @RequestBody Raffle body
);


    @Operation(summary = "Create user.", description = "This can only be done by the logged in user.", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/user",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<User> createUser(@Parameter(in = ParameterIn.DEFAULT, description = "Created user object", schema=@Schema()) @Valid @RequestBody User body
);


    @Operation(summary = "Creates list of users with given input array.", description = "Creates list of users with given input array.", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/user/createWithList",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<User> createUsersWithListInput(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody List<User> body
);


    @Operation(summary = "Deletes a raffle.", description = "Delete a raffle.", security = {
        @SecurityRequirement(name = "rafflestore_auth", scopes = {
            "write:raffles",
"read:raffles"        })    }, tags={ "raffle" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Raffle deleted"),
        
        @ApiResponse(responseCode = "400", description = "Invalid raffle value"),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/raffle/{raffleId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRaffle(@Parameter(in = ParameterIn.PATH, description = "Raffle id to delete", required=true, schema=@Schema()) @PathVariable("raffleId") Long raffleId
, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey
);


    @Operation(summary = "Delete user resource.", description = "This can only be done by the logged in user.", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "User deleted"),
        
        @ApiResponse(responseCode = "400", description = "Invalid username supplied"),
        
        @ApiResponse(responseCode = "404", description = "User not found"),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/user/{username}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@Parameter(in = ParameterIn.PATH, description = "The name that needs to be deleted", required=true, schema=@Schema()) @PathVariable("username") String username
);


    @Operation(summary = "Finds Raffles by status.", description = "Multiple status values can be provided with comma separated strings.", security = {
        @SecurityRequirement(name = "rafflestore_auth", scopes = {
            "write:raffles",
"read:raffles"        })    }, tags={ "raffle" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Raffle.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid status value"),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/raffle/findByStatus",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Raffle>> findRafflesByStatus(@Parameter(in = ParameterIn.QUERY, description = "Status values that need to be considered for filter" ,schema=@Schema(allowableValues={ "available", "pending", "sold" }
, defaultValue="available")) @Valid @RequestParam(value = "status", required = false, defaultValue="available") String status
);


    @Operation(summary = "Find raffle by ID.", description = "Returns a single raffle.", security = {
        @SecurityRequirement(name = "api_key"),
@SecurityRequirement(name = "rafflestore_auth", scopes = {
            "write:raffles",
"read:raffles"        })    }, tags={ "raffle" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Raffle.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Raffle not found"),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/raffle/{raffleId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Raffle> getRaffleById(@Parameter(in = ParameterIn.PATH, description = "ID of raffle to return", required=true, schema=@Schema()) @PathVariable("raffleId") Long raffleId
);


    @Operation(summary = "Get user by user name.", description = "Get user detail based on username.", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid username supplied"),
        
        @ApiResponse(responseCode = "404", description = "User not found"),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/user/{username}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> getUserByName(@Parameter(in = ParameterIn.PATH, description = "The name that needs to be fetched. Use user1 for testing", required=true, schema=@Schema()) @PathVariable("username") String username
);


    @Operation(summary = "Logs user into the system.", description = "Log into the system.", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/xml", schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid username/password supplied"),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/user/login",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> loginUser(@Parameter(in = ParameterIn.QUERY, description = "The user name for login" ,schema=@Schema()) @Valid @RequestParam(value = "username", required = false) String username
, @Parameter(in = ParameterIn.QUERY, description = "The password for login in clear text" ,schema=@Schema()) @Valid @RequestParam(value = "password", required = false) String password
);


    @Operation(summary = "Logs out current logged in user session.", description = "Log user out of the system.", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/user/logout",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> logoutUser();


    @Operation(summary = "Update an existing raffle.", description = "Update an existing raffle by Id.", security = {
        @SecurityRequirement(name = "rafflestore_auth", scopes = {
            "write:raffles",
"read:raffles"        })    }, tags={ "raffle" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Raffle.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Raffle not found"),
        
        @ApiResponse(responseCode = "422", description = "Validation exception"),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/raffle",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Raffle> updateRaffle(@Parameter(in = ParameterIn.DEFAULT, description = "Update an existent raffle in the store", required=true, schema=@Schema()) @Valid @RequestBody Raffle body
);


    @Operation(summary = "Updates a raffle in the store with form data.", description = "Updates a raffle resource based on the form data.", security = {
        @SecurityRequirement(name = "rafflestore_auth", scopes = {
            "write:raffles",
"read:raffles"        })    }, tags={ "raffle" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Raffle.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/raffle/{raffleId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Raffle> updateRaffleWithForm(@Parameter(in = ParameterIn.PATH, description = "ID of raffle that needs to be updated", required=true, schema=@Schema()) @PathVariable("raffleId") Long raffleId
, @Parameter(in = ParameterIn.QUERY, description = "Name of raffle that needs to be updated" ,schema=@Schema()) @Valid @RequestParam(value = "name", required = false) String name
, @Parameter(in = ParameterIn.QUERY, description = "Status of raffle that needs to be updated" ,schema=@Schema()) @Valid @RequestParam(value = "status", required = false) String status
);


    @Operation(summary = "Update user resource.", description = "This can only be done by the logged in user.", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        
        @ApiResponse(responseCode = "400", description = "bad request"),
        
        @ApiResponse(responseCode = "404", description = "user not found"),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/v1/user/{username}",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUser(@Parameter(in = ParameterIn.PATH, description = "name that need to be deleted", required=true, schema=@Schema()) @PathVariable("username") String username
, @Parameter(in = ParameterIn.DEFAULT, description = "Update an existent user in the store", schema=@Schema()) @Valid @RequestBody User body
);

}

